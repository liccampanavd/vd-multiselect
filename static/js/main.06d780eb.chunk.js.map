{"version":3,"sources":["App.js","../../src/index.js","index.js"],"names":["BoolOption","text","checked","onChange","Fragment","type","defaultChecked","onClick","e","target","App","useState","lines","setLines","store","setStore","loadingStore","setLoadingStore","title","clearEnabled","disabled","displayInfo","searchEnabled","selectAllEnabled","selectionMode","props","setProps","useEffect","fetch","then","res","json","setTimeout","loading","height","labelKey","valueKey","value","onValueChanged","values","handleChange","className","href","__dirname","concat","rel","placeholder","maxLength","Object","assign","defaultValue","map","key","MultiSelect","width","texts","refMain","useRef","diference","storeFilter","disabledItems","v","names","styles","createStyles","searchValue","filterContent","setStoreFilter","setSearchValue","onClear","onSelectAll","j","Set","x","y","item","Math","event","selectedValue","setLastSelected","startPos","endPos","currentValue","start","range","ds","Array","index","current","handlerClick","elementAttr","search","clear","selectAll","deselectAll","items","selectedItems","noDataFound","PropTypes","string","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.06d780eb.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react'\n\nimport { MultiSelect } from '@liccampanavd/vd-multiselect'\nimport '@liccampanavd/vd-multiselect/dist/index.css'\n\nconst BoolOption = ({ text, checked, onChange }) => {\n  return (\n    <React.Fragment>\n      <label>\n        <input\n          type='checkbox'\n          defaultChecked={checked}\n          onClick={(e) => onChange(e.target.checked)}\n        />\n        {text}\n      </label>\n    </React.Fragment>\n  )\n}\n\nconst App = () => {\n  const [lines, setLines] = useState([])\n  const [store, setStore] = useState([])\n  const [loadingStore, setLoadingStore] = useState(true)\n\n  const [props, setProps] = useState({\n    title: 'Favourite Programming Languages',\n    clearEnabled: true,\n    disabled: false,\n    displayInfo: true,\n    searchEnabled: true,\n    selectAllEnabled: true,\n    selectionMode: 'multiple'\n  })\n\n  useEffect(() => {\n    fetch('data.json')\n      .then((res) => res.json())\n      .then((res) =>\n        setTimeout(() => {\n          setStore(res)\n          setLoadingStore(false)\n        }, 4000)\n      )\n  }, [])\n\n  const handleChange = (values) => {\n    setLines(values)\n  }\n\n  return (\n    <React.Fragment>\n      <MultiSelect\n        clearEnabled={props.clearEnabled}\n        disabled={props.disabled}\n        displayInfo={props.displayInfo}\n        searchEnabled={props.searchEnabled}\n        selectAllEnabled={props.selectAllEnabled}\n        title={props.title}\n        selectionMode={props.selectionMode}\n        loading={props.loading || loadingStore}\n        height='250px'\n        store={store}\n        labelKey='lineDesc'\n        valueKey='lineId'\n        value={lines}\n        onValueChanged={(values) => handleChange(values)}\n      />\n      <br />\n      <div className='settingBox'>\n        <label>\n          <b>Settings</b>\n        </label>\n        <a\n          href={__dirname.concat('data.json')}\n          target='_blank'\n          rel='noopener noreferrer'\n        >\n          Link to data\n        </a>\n        <input\n          type='text'\n          placeholder='Title'\n          value={props.title}\n          maxLength={50}\n          onChange={(e) =>\n            setProps(Object.assign({}, props, { title: e.target.value }))\n          }\n        />\n        <select\n          defaultValue='multiple'\n          onChange={(e) => {\n            setProps(\n              Object.assign({}, props, { selectionMode: e.target.value })\n            )\n            setLines([])\n          }}\n        >\n          <option value='single'>Single</option>\n          <option value='multiple'>Multiple</option>\n        </select>\n        {[\n          'clearEnabled',\n          'disabled',\n          'displayInfo',\n          'loading',\n          'searchEnabled',\n          'selectAllEnabled'\n        ].map((key) => (\n          <BoolOption\n            key={key}\n            text={key}\n            checked={props[key]}\n            onChange={(value) =>\n              setProps(Object.assign({}, props, { [key]: value }))\n            }\n          />\n        ))}\n      </div>\n    </React.Fragment>\n  )\n}\n\nexport default App\n","import React, { useEffect, useRef, useState } from 'react'\nimport PropTypes from 'prop-types'\nimport styles from './styles.module.css'\n\nexport const MultiSelect = ({\n  disabled,\n  disabledItems,\n  displayInfo,\n  elementAttr,\n  clearEnabled,\n  searchEnabled,\n  selectAllEnabled,\n  selectionMode,\n  height,\n  labelKey,\n  loading,\n  onValueChanged,\n  onClear,\n  onSelectAll,\n  texts,\n  store,\n  title,\n  value,\n  valueKey,\n  width\n}) => {\n  texts = Object.assign({}, MultiSelect.defaultProps.texts, texts)\n\n  //#region References\n\n  const refMain = useRef(null)\n\n  //#endregion\n\n  //#region States\n\n  const [searchValue, setSearchValue] = useState('')\n  const [storeFilter, setStoreFilter] = useState([])\n  const [lastSelected, setLastSelected] = useState(null)\n\n  //#endregion\n\n  //#region Hooks\n\n  useEffect(() => {\n    if (refMain) {\n      if (height) refMain.current.style.height = height\n      if (width) refMain.current.style.width = width\n    }\n  }, [])\n\n  //#endregion\n\n  //#region Funtions & Events\n\n  const createStyles = () => {\n    let names = [styles.multiselect]\n    if (disabled) names.push(styles.disabled)\n    return names.join(' ')\n  }\n\n  const handlerSearch = (e) => {\n    let filterContent = store.filter((v) => {\n      if (\n        v[labelKey].toUpperCase().indexOf(e.target.value.toUpperCase()) !== -1\n      )\n        return v\n      return null\n    })\n\n    setStoreFilter(filterContent)\n    setSearchValue(e.target.value)\n  }\n\n  const handleClear = () => {\n    if (onClear) onClear()\n    else onValueChanged([])\n  }\n\n  const handleSelectAll = () => {\n    if (onSelectAll) onSelectAll()\n    else {\n      if (!disabled) {\n        if (searchValue !== '') {\n          if (storeFilter.length > 0) {\n            if (value === null) {\n              onValueChanged([\n                ...storeFilter\n                  .map((v) => v[valueKey])\n                  .filter((j) => !disabledItems.includes(j))\n              ])\n            } else {\n              if (diference(storeFilter, value, valueKey, disabledItems)) {\n                //Select All (search)\n                onValueChanged([\n                  ...new Set([\n                    ...value,\n                    ...value\n                      .filter((x) =>\n                        storeFilter.map((y) => y[valueKey]).includes(x)\n                      )\n                      .concat(\n                        storeFilter\n                          .map((v) => v[valueKey])\n                          .filter((x) => !value.includes(x))\n                      )\n                      .filter((x) => !disabledItems.includes(x))\n                  ])\n                ])\n              } else {\n                //Deselect All (search)\n                onValueChanged([\n                  ...value\n                    .filter(\n                      (x) => !storeFilter.map((y) => y[valueKey]).includes(x)\n                    )\n                    .filter((x) => !disabledItems.includes(x))\n                ])\n              }\n            }\n          }\n        } else {\n          if (store.length > 0)\n            if (value === null) {\n              onValueChanged([\n                ...store\n                  .map((v) => v[valueKey])\n                  .filter((x) => !disabledItems.includes(x))\n              ])\n            } else {\n              if (diference(store, value, valueKey, disabledItems)) {\n                //Select All\n                onValueChanged([\n                  ...store\n                    .map((v) => v[valueKey])\n                    .filter((x) => !disabledItems.includes(x))\n                ])\n              } else {\n                //Deselect All\n                onValueChanged([])\n              }\n            }\n        }\n      }\n    }\n  }\n\n  const handlerClick = (e, selectedValue) => {\n    e.preventDefault()\n\n    setLastSelected(selectedValue)\n\n    if (e.shiftKey) {\n      if (selectionMode !== 'multiple') {\n        e.preventDefault()\n        return\n      }\n\n      let startPos = store.map((item) => item[valueKey]).indexOf(lastSelected)\n      let endPos = store.map((item) => item[valueKey]).indexOf(selectedValue)\n      let currentValue = value || []\n      let start = false\n      let range = []\n      let ds\n\n      if (searchValue !== '') ds = storeFilter\n      else ds = store\n\n      ds.forEach((v) => {\n        if (v[valueKey] === (startPos > endPos ? selectedValue : lastSelected))\n          start = true\n\n        if (start) {\n          range.push(v[valueKey])\n          if (\n            v[valueKey] === (startPos > endPos ? lastSelected : selectedValue)\n          )\n            start = false\n        }\n      })\n\n      onValueChanged(Array.from(new Set([...currentValue, ...range])))\n    } else {\n      let currentValue = value || []\n      if (onValueChanged) {\n        if (selectionMode !== 'multiple') {\n          const index = currentValue.findIndex((v) => v === selectedValue)\n          if (index === -1) onValueChanged([selectedValue])\n          else onValueChanged([])\n        } else {\n          const index = currentValue.findIndex((v) => v === selectedValue)\n          if (index < 0) onValueChanged([...currentValue, selectedValue])\n          else {\n            let current = currentValue.slice()\n            current.splice(index, 1)\n            onValueChanged(current)\n          }\n        }\n      }\n    }\n  }\n\n  const diference = (storeFilter, value, valueKey, disabledItems) =>\n    storeFilter.length !==\n    storeFilter.filter((v) => {\n      return value.indexOf(v[valueKey]) !== -1\n    }).length +\n      (disabledItems !== undefined\n        ? storeFilter.filter((v) => {\n            return disabledItems.indexOf(v[valueKey]) !== -1\n          }).length\n        : 0)\n\n  //#endregion\n\n  return (\n    <div ref={refMain} className={createStyles()} {...elementAttr}>\n      <div className={styles.header}>\n        <span>{title}</span>\n        {displayInfo &&\n          (value.length > 0 && selectionMode !== 'single' ? (\n            <span>\n              {value.length} of {store.length} {texts.selectedItems}\n            </span>\n          ) : searchValue !== '' ? (\n            <span>\n              {storeFilter.length} {texts.items}\n            </span>\n          ) : (\n            <span>\n              {store.length} {texts.items}\n            </span>\n          ))}\n      </div>\n      {((searchEnabled && selectionMode === 'single') ||\n        ((searchEnabled || clearEnabled || selectAllEnabled) &&\n          selectionMode === 'multiple')) && (\n        <div className={styles.actionContainer}>\n          {searchEnabled && (\n            <input\n              placeholder={texts.search}\n              onChange={handlerSearch}\n              value={searchValue}\n            />\n          )}\n          {clearEnabled && value.length > 0 && selectionMode === 'multiple' && (\n            <button className={styles.clearButton} onClick={handleClear}>\n              {texts.clear}\n            </button>\n          )}\n          {selectAllEnabled && selectionMode === 'multiple' && (\n            <button\n              className={styles.selectAllButton}\n              onClick={handleSelectAll}\n            >\n              {searchValue !== ''\n                ? diference(\n                    storeFilter,\n                    value,\n                    valueKey,\n                    disabledItems,\n                    store\n                  ) || storeFilter.length === 0\n                  ? texts.selectAll\n                  : texts.deselectAll\n                : diference(store, value, valueKey, disabledItems) ||\n                  store.length === 0\n                ? texts.selectAll\n                : texts.deselectAll}\n            </button>\n          )}\n        </div>\n      )}\n      <div className={styles.selectionContainer}>\n        {loading ? (\n          <div className={styles.loader} />\n        ) : searchValue !== '' && storeFilter.length === 0 ? (\n          <div>{texts.noDataFound}</div>\n        ) : (\n          <ul>\n            {(searchValue !== '' ? storeFilter : store).map((item) => (\n              <li\n                key={Math.random().toString(36).slice(2).substring(0, 8)}\n                className={\n                  disabledItems.includes(item[valueKey])\n                    ? styles.disabled\n                    : value.includes(item[valueKey])\n                    ? styles.selected\n                    : ''\n                }\n                onClick={(event) =>\n                  disabledItems.includes(item[valueKey])\n                    ? undefined\n                    : handlerClick(event, item[valueKey])\n                }\n              >\n                {item[labelKey]}\n              </li>\n            ))}\n          </ul>\n        )}\n      </div>\n    </div>\n  )\n}\n\n//#region Properties\n\nMultiSelect.defaultProps = {\n  clearEnabled: true,\n  disabled: false,\n  disabledItems: [],\n  displayInfo: true,\n  elementAttr: {},\n  height: '',\n  labelKey: '',\n  loading: false,\n  onValueChanged: undefined,\n  onClear: undefined,\n  onSelectAll: undefined,\n  searchEnabled: true,\n  selectAllEnabled: true,\n  selectionMode: 'multiple',\n  store: [],\n  texts: {\n    search: 'Search...',\n    clear: 'Clear',\n    selectAll: 'Select All',\n    deselectAll: 'Deselect All',\n    items: 'Item(s)',\n    selectedItems: 'Item(s) selected',\n    noDataFound: 'No data to display'\n  },\n  title: '',\n  value: [],\n  valueKey: '',\n  width: ''\n}\n\nMultiSelect.propTypes = {\n  clearEnabled: PropTypes.bool,\n  disabled: PropTypes.bool,\n  disabledItems: PropTypes.array,\n  displayInfo: PropTypes.bool,\n  elementAttr: PropTypes.object,\n  height: PropTypes.string,\n  labelKey: PropTypes.string,\n  loading: PropTypes.bool,\n  onValueChanged: PropTypes.func,\n  onClear: PropTypes.func,\n  onSelectAll: PropTypes.func,\n  searchEnabled: PropTypes.bool,\n  selectAllEnabled: PropTypes.bool,\n  selectionMode: PropTypes.oneOf(['single', 'multiple']),\n  store: PropTypes.array,\n  texts: PropTypes.object,\n  title: PropTypes.string,\n  value: PropTypes.array,\n  valueKey: PropTypes.string,\n  width: PropTypes.string\n}\n\n//#endregion\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}