{"version":3,"sources":["../../src/index.js","App.js","index.js"],"names":["MultiSelect","width","texts","Object","refMain","useRef","useState","useEffect","diference","storeFilter","value","valueKey","disabledItems","v","names","styles","createStyles","className","displayInfo","store","searchValue","searchEnabled","placeholder","onChange","e","filterContent","setStoreFilter","setSearchValue","clearEnabled","selectionMode","onClick","onClear","onValueChanged","selectAllEnabled","onSelectAll","j","Set","x","y","loading","item","key","Math","event","selectedValue","setLastSelected","startPos","endPos","currentValue","start","range","ds","Array","index","current","handlerClick","disabled","elementAttr","height","labelKey","search","clear","selectAll","deselectAll","items","selectedItems","noDataFound","title","PropTypes","string","App","lines","setLines","setStore","loadingStore","setLoadingStore","setTimeout","data","values","handleChange","ReactDOM","render","document","getElementById"],"mappings":"mmBAIaA,EAAc,EAAC,2OAoB1BC,YAEAC,EAAQC,iBAAkBH,eAAlBG,MAARD,GAIA,MAAME,EAAUC,iBAAhB,MALI,EAWkCC,mBAAtC,IAXI,mBAWE,EAXF,KAWE,EAXF,OAYkCA,mBAAtC,IAZI,mBAYE,EAZF,KAYE,EAZF,OAaoCA,mBAAxC,MAbI,mBAaE,EAbF,KAaE,EAbF,KAmBJC,oBAAU,KACR,IACE,IAAYH,0BACZ,IAAWA,2BAHfG,IAWA,MAmJMC,EAAY,CAACC,EAAaC,EAAOC,EAAUC,IAC/CH,WACAA,EAAA,OAAoBI,IAClB,IAAOH,UAAcG,EAAdH,KADT,aAGG,IAAAE,EACGH,EAAA,OAAoBI,IAClB,IAAOD,UAAsBC,EAAtBD,KAFZ,OALL,GAaA,OACE,uDAjKmB,MACnB,IAAIE,EAAQ,CAACC,GAEb,OADA,GAAcD,OAAWC,GAClBD,OAAP,MA8J8BE,IAA9B,GACE,yBAAKC,UAAWF,GACd,8BADF,GAEGG,IACER,WACC,8BACGA,EADH,cACqBS,EADrB,WACoCjB,EAFrCQ,eAIGU,OACF,8BACGX,EADH,WACwBP,EAFtBkB,OAKF,8BACGD,EADH,WACkBjB,EAd1B,SAkBE,yBAAKe,UAAWF,GACbM,GACC,2BACEC,YAAapB,EADf,OAEEqB,SAjLaC,IACrB,IAAIC,EAAgBN,EAAA,OAAcN,IAChC,IACEA,2BAAkCW,eAAlCX,eAEOA,EACT,MAGFa,KACAC,EAAeH,SAAfG,QAwKQjB,MAAOU,IAGVQ,GAAgBlB,SAAhBkB,gBAAoCC,GACnC,4BAAQZ,UAAWF,EAAoBe,QAzK3B,KAClB,EAAaC,IACRC,QAwKI9B,EAVP,OAaG+B,gBAAoBJ,GACnB,4BAAQZ,UAAWF,EAAwBe,QAzK3B,KACtB,EAAiBI,IAEf,IACE,KAAId,EACEX,SAAJ,IACE,OAAIC,EACFsB,EAAe,IACVvB,MACKI,GAAMA,EADXJ,WAEQ0B,IAAOvB,WAHpBoB,MAMIxB,EAAUC,EAAaC,EAAOC,EAAlC,GAEEqB,EAAe,IACV,IAAII,IAAI,SAEN1B,SACQ2B,GACP5B,MAAiB6B,GAAMA,EAAvB7B,aAFDC,WAKCD,MACQI,GAAMA,EADdJ,WAEW4B,IAAO3B,WAPnBA,YASQ2B,IAAOzB,WAZtBoB,QAiBAA,EAAe,IACVtB,SAEE2B,IAAO5B,MAAiB6B,GAAMA,EAAvB7B,aAFTC,WAIQ2B,IAAOzB,WALpBoB,OAWFb,SAAJ,IACE,OAAIT,GAOEF,EAAUW,EAAOT,EAAOC,EAA5B,GANAqB,EAAe,IACVb,MACKN,GAAMA,EADXM,WAEQkB,IAAOzB,WAHpBoB,MAeEA,UA8GHZ,OACGZ,EAAUC,EAAaC,EAAOC,EAA9BH,QACAC,SACEP,EAFFM,UAGEN,EAJLkB,YAKGZ,EAAUW,EAAOT,EAAOC,EAAxBH,QACAW,SACAjB,EAFAM,UAGAN,EAzCZ,cA6CE,yBAAKe,UAAWF,GACbwB,EACC,yBAAKtB,UAAWF,IACdK,YAAsBX,SACxB,6BAAMP,EADJkB,aAGF,6BACIA,SAAD,OAAgDoB,GAC/C,wBACEC,IAAKC,gDADP,GAEEzB,UACEL,WAAuB4B,EAAvB5B,IACIG,EACAL,WAAe8B,EAAf9B,IACAK,EANR,GASEe,QAAUa,GACR/B,WAAuB4B,EAAvB5B,WApIK,EAACY,EAAGoB,KAKvB,GAJApB,mBAEAqB,KAEIrB,EAAJ,SAAgB,CACd,gBAAIK,EAEF,YADAL,mBAIF,IAKA,EALIsB,EAAW3B,MAAWqB,GAASA,EAApBrB,YAAf,GACI4B,EAAS5B,MAAWqB,GAASA,EAApBrB,YAAb,GACI6B,EAAetC,GAAnB,GACIuC,GAAJ,EACIC,EAAJ,GAGwBC,EAAxB,KAAI/B,EAAJ,EACK+B,EAELA,UAAYtC,IACNA,QAAiBiC,MAArB,KACEG,MAEF,IACEC,OAAWrC,EAAXqC,IAEErC,QAAiBiC,MADnB,KAGEG,SAINjB,EAAeoB,WAAW,IAAIhB,IAAI,SAAlCJ,UACK,CACL,IAAIgB,EAAetC,GAAnB,GACA,KACE,gBAAImB,EAA8B,CAChC,MAAMwB,EAAQL,YAAwBnC,GAAMA,IAA5C,GACkBmB,GAAlB,IAAIqB,EAA6B,CAAjC,GACKrB,QACA,CACL,MAAMqB,EAAQL,YAAwBnC,GAAMA,IAA5C,GACA,GAAIwC,EAAJ,EAAerB,EAAe,MAA9B,QACK,CACH,IAAIsB,EAAUN,EAAd,QACAM,cACAtB,SAsFUuB,CAAaZ,EAAOH,EAAR,KAGjBA,EArEf,SAiFFxC,eAA2B,CACzB4B,cADyB,EAEzB4B,UAFyB,EAGzB5C,cAHyB,GAIzBM,aAJyB,EAKzBuC,YALyB,GAMzBC,OANyB,GAOzBC,SAPyB,GAQzBpB,SARyB,EASzBP,oBATyB,EAUzBD,aAVyB,EAWzBG,iBAXyB,EAYzBb,eAZyB,EAazBY,kBAbyB,EAczBJ,cAdyB,WAezBV,MAfyB,GAgBzBjB,MAAO,CACL0D,OADK,YAELC,MAFK,QAGLC,UAHK,aAILC,YAJK,eAKLC,MALK,UAMLC,cANK,mBAOLC,YAAa,sBAEfC,MAzByB,GA0BzBzD,MA1ByB,GA2BzBC,SA3ByB,GA4BzBV,MAAO,IAGTD,YAAwB,CACtB4B,aAAcwC,IADQ,KAEtBZ,SAAUY,IAFY,KAGtBxD,cAAewD,IAHO,MAItBlD,YAAakD,IAJS,KAKtBX,YAAaW,IALS,OAMtBV,OAAQU,IANc,OAOtBT,SAAUS,IAPY,OAQtB7B,QAAS6B,IARa,KAStBpC,eAAgBoC,IATM,KAUtBrC,QAASqC,IAVa,KAWtBlC,YAAakC,IAXS,KAYtB/C,cAAe+C,IAZO,KAatBnC,iBAAkBmC,IAbI,KActBvC,cAAeuC,UAAgB,CAAC,SAdV,aAetBjD,MAAOiD,IAfe,MAgBtBlE,MAAOkE,IAhBe,OAiBtBD,MAAOC,IAjBe,OAkBtB1D,MAAO0D,IAlBe,MAmBtBzD,SAAUyD,IAnBY,OAoBtBnE,MAAOmE,IAAUC,Q,iBCrTJC,MA/BH,KAAO,MAAD,EACUhE,mBAAS,IADnB,mBACTiE,EADS,KACFC,EADE,OAEUlE,mBAAS,IAFnB,mBAETa,EAFS,KAEFsD,EAFE,OAGwBnE,oBAAS,GAHjC,mBAGToE,EAHS,KAGKC,EAHL,KAKhBpE,oBAAU,KACRqE,WAAW,KACTH,EAASI,GACTF,GAAgB,IACf,MACF,IAMH,OACE,kBAAC3E,EAAD,CACEmE,MAAM,kCACNT,OAAO,QACP7B,cAAc,WACdV,MAAOA,EACPwC,SAAS,WACThD,SAAS,SACTD,MAAO6D,EACPhC,QAASmC,EACT1C,eAAiB8C,GAdCA,KACpBN,EAASM,IAaqBC,CAAaD,MC3B/CE,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,U","file":"static/js/main.2ff37e4f.chunk.js","sourcesContent":["import React, { useEffect, useRef, useState } from 'react'\nimport PropTypes from 'prop-types'\nimport styles from './styles.module.css'\n\nexport const MultiSelect = ({\n  disabled,\n  disabledItems,\n  displayInfo,\n  elementAttr,\n  clearEnabled,\n  searchEnabled,\n  selectAllEnabled,\n  selectionMode,\n  height,\n  labelKey,\n  loading,\n  onValueChanged,\n  onClear,\n  onSelectAll,\n  texts,\n  store,\n  title,\n  value,\n  valueKey,\n  width\n}) => {\n  texts = Object.assign({}, MultiSelect.defaultProps.texts, texts)\n\n  //#region References\n\n  const refMain = useRef(null)\n\n  //#endregion\n\n  //#region States\n\n  const [searchValue, setSearchValue] = useState('')\n  const [storeFilter, setStoreFilter] = useState([])\n  const [lastSelected, setLastSelected] = useState(null)\n\n  //#endregion\n\n  //#region Hooks\n\n  useEffect(() => {\n    if (refMain) {\n      if (height) refMain.current.style.height = height\n      if (width) refMain.current.style.width = width\n    }\n  }, [])\n\n  //#endregion\n\n  //#region Funtions & Events\n\n  const createStyles = () => {\n    let names = [styles.multiselect]\n    if (disabled) names.push(styles.disabled)\n    return names.join(' ')\n  }\n\n  const handlerSearch = (e) => {\n    let filterContent = store.filter((v) => {\n      if (\n        v[labelKey].toUpperCase().indexOf(e.target.value.toUpperCase()) !== -1\n      )\n        return v\n      return null\n    })\n\n    setStoreFilter(filterContent)\n    setSearchValue(e.target.value)\n  }\n\n  const handleClear = () => {\n    if (onClear) onClear()\n    else onValueChanged([])\n  }\n\n  const handleSelectAll = () => {\n    if (onSelectAll) onSelectAll()\n    else {\n      if (!disabled) {\n        if (searchValue !== '') {\n          if (storeFilter.length > 0) {\n            if (value === null) {\n              onValueChanged([\n                ...storeFilter\n                  .map((v) => v[valueKey])\n                  .filter((j) => !disabledItems.includes(j))\n              ])\n            } else {\n              if (diference(storeFilter, value, valueKey, disabledItems)) {\n                //Select All (search)\n                onValueChanged([\n                  ...new Set([\n                    ...value,\n                    ...value\n                      .filter((x) =>\n                        storeFilter.map((y) => y[valueKey]).includes(x)\n                      )\n                      .concat(\n                        storeFilter\n                          .map((v) => v[valueKey])\n                          .filter((x) => !value.includes(x))\n                      )\n                      .filter((x) => !disabledItems.includes(x))\n                  ])\n                ])\n              } else {\n                //Deselect All (search)\n                onValueChanged([\n                  ...value\n                    .filter(\n                      (x) => !storeFilter.map((y) => y[valueKey]).includes(x)\n                    )\n                    .filter((x) => !disabledItems.includes(x))\n                ])\n              }\n            }\n          }\n        } else {\n          if (store.length > 0)\n            if (value === null) {\n              onValueChanged([\n                ...store\n                  .map((v) => v[valueKey])\n                  .filter((x) => !disabledItems.includes(x))\n              ])\n            } else {\n              if (diference(store, value, valueKey, disabledItems)) {\n                //Select All\n                onValueChanged([\n                  ...store\n                    .map((v) => v[valueKey])\n                    .filter((x) => !disabledItems.includes(x))\n                ])\n              } else {\n                //Deselect All\n                onValueChanged([])\n              }\n            }\n        }\n      }\n    }\n  }\n\n  const handlerClick = (e, selectedValue) => {\n    e.preventDefault()\n\n    setLastSelected(selectedValue)\n\n    if (e.shiftKey) {\n      if (selectionMode !== 'multiple') {\n        e.preventDefault()\n        return\n      }\n\n      let startPos = store.map((item) => item[valueKey]).indexOf(lastSelected)\n      let endPos = store.map((item) => item[valueKey]).indexOf(selectedValue)\n      let currentValue = value || []\n      let start = false\n      let range = []\n      let ds\n\n      if (searchValue !== '') ds = storeFilter\n      else ds = store\n\n      ds.forEach((v) => {\n        if (v[valueKey] === (startPos > endPos ? selectedValue : lastSelected))\n          start = true\n\n        if (start) {\n          range.push(v[valueKey])\n          if (\n            v[valueKey] === (startPos > endPos ? lastSelected : selectedValue)\n          )\n            start = false\n        }\n      })\n\n      onValueChanged(Array.from(new Set([...currentValue, ...range])))\n    } else {\n      let currentValue = value || []\n      if (onValueChanged) {\n        if (selectionMode !== 'multiple') {\n          const index = currentValue.findIndex((v) => v === selectedValue)\n          if (index === -1) onValueChanged([selectedValue])\n          else onValueChanged([])\n        } else {\n          const index = currentValue.findIndex((v) => v === selectedValue)\n          if (index < 0) onValueChanged([...currentValue, selectedValue])\n          else {\n            let current = currentValue.slice()\n            current.splice(index, 1)\n            onValueChanged(current)\n          }\n        }\n      }\n    }\n  }\n\n  const diference = (storeFilter, value, valueKey, disabledItems) =>\n    storeFilter.length !==\n    storeFilter.filter((v) => {\n      return value.indexOf(v[valueKey]) !== -1\n    }).length +\n      (disabledItems !== undefined\n        ? storeFilter.filter((v) => {\n            return disabledItems.indexOf(v[valueKey]) !== -1\n          }).length\n        : 0)\n\n  //#endregion\n\n  return (\n    <div ref={refMain} className={createStyles()} {...elementAttr}>\n      <div className={styles.header}>\n        <span>{title}</span>\n        {displayInfo &&\n          (value.length > 0 ? (\n            <span>\n              {value.length} of {store.length} {texts.selectedItems}\n            </span>\n          ) : searchValue !== '' ? (\n            <span>\n              {storeFilter.length} {texts.items}\n            </span>\n          ) : (\n            <span>\n              {store.length} {texts.items}\n            </span>\n          ))}\n      </div>\n      <div className={styles.actionContainer}>\n        {searchEnabled && (\n          <input\n            placeholder={texts.search}\n            onChange={handlerSearch}\n            value={searchValue}\n          />\n        )}\n        {clearEnabled && value.length > 0 && selectionMode === 'multiple' && (\n          <button className={styles.clearButton} onClick={handleClear}>\n            {texts.clear}\n          </button>\n        )}\n        {selectAllEnabled && selectionMode === 'multiple' && (\n          <button className={styles.selectAllButton} onClick={handleSelectAll}>\n            {searchValue !== ''\n              ? diference(storeFilter, value, valueKey, disabledItems, store) ||\n                storeFilter.length === 0\n                ? texts.selectAll\n                : texts.deselectAll\n              : diference(store, value, valueKey, disabledItems) ||\n                store.length === 0\n              ? texts.selectAll\n              : texts.deselectAll}\n          </button>\n        )}\n      </div>\n      <div className={styles.selectionContainer}>\n        {loading ? (\n          <div className={styles.loader} />\n        ) : searchValue !== '' && storeFilter.length === 0 ? (\n          <div>{texts.noDataFound}</div>\n        ) : (\n          <ul>\n            {(searchValue !== '' ? storeFilter : store).map((item) => (\n              <li\n                key={Math.random().toString(36).slice(2).substring(0, 8)}\n                className={\n                  disabledItems.includes(item[valueKey])\n                    ? styles.disabled\n                    : value.includes(item[valueKey])\n                    ? styles.selected\n                    : ''\n                }\n                onClick={(event) =>\n                  disabledItems.includes(item[valueKey])\n                    ? undefined\n                    : handlerClick(event, item[valueKey])\n                }\n              >\n                {item[labelKey]}\n              </li>\n            ))}\n          </ul>\n        )}\n      </div>\n    </div>\n  )\n}\n\n//#region Properties\n\nMultiSelect.defaultProps = {\n  clearEnabled: true,\n  disabled: false,\n  disabledItems: [],\n  displayInfo: true,\n  elementAttr: {},\n  height: '',\n  labelKey: '',\n  loading: false,\n  onValueChanged: undefined,\n  onClear: undefined,\n  onSelectAll: undefined,\n  searchEnabled: true,\n  selectAllEnabled: true,\n  selectionMode: 'multiple',\n  store: [],\n  texts: {\n    search: 'Search...',\n    clear: 'Clear',\n    selectAll: 'Select All',\n    deselectAll: 'Deselect All',\n    items: 'Item(s)',\n    selectedItems: 'Item(s) selected',\n    noDataFound: 'No data to display'\n  },\n  title: '',\n  value: [],\n  valueKey: '',\n  width: ''\n}\n\nMultiSelect.propTypes = {\n  clearEnabled: PropTypes.bool,\n  disabled: PropTypes.bool,\n  disabledItems: PropTypes.array,\n  displayInfo: PropTypes.bool,\n  elementAttr: PropTypes.object,\n  height: PropTypes.string,\n  labelKey: PropTypes.string,\n  loading: PropTypes.bool,\n  onValueChanged: PropTypes.func,\n  onClear: PropTypes.func,\n  onSelectAll: PropTypes.func,\n  searchEnabled: PropTypes.bool,\n  selectAllEnabled: PropTypes.bool,\n  selectionMode: PropTypes.oneOf(['single', 'multiple']),\n  store: PropTypes.array,\n  texts: PropTypes.object,\n  title: PropTypes.string,\n  value: PropTypes.array,\n  valueKey: PropTypes.string,\n  width: PropTypes.string\n}\n\n//#endregion\n","import React, { useEffect, useState } from 'react'\n\nimport { MultiSelect } from '@liccampanavd/vd-multiselect'\nimport '@liccampanavd/vd-multiselect/dist/index.css'\n\nimport data from './data.json'\n\nconst App = () => {\n  const [lines, setLines] = useState([])\n  const [store, setStore] = useState([])\n  const [loadingStore, setLoadingStore] = useState(true)\n\n  useEffect(() => {\n    setTimeout(() => {\n      setStore(data)\n      setLoadingStore(false)\n    }, 4000)\n  }, [])\n\n  const handleChange = (values) => {\n    setLines(values)\n  }\n\n  return (\n    <MultiSelect\n      title='Favourite Programming Languages'\n      height='250px'\n      selectionMode='multiple'\n      store={store}\n      labelKey='lineDesc'\n      valueKey='lineId'\n      value={lines}\n      loading={loadingStore}\n      onValueChanged={(values) => handleChange(values)}\n    />\n  )\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}