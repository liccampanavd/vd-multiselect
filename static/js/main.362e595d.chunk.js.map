{"version":3,"sources":["../../src/index.js","App.js","index.js"],"names":["MultiSelect","disabled","disabledItems","displayInfo","elementAttr","clearEnabled","searchEnabled","selectAllEnabled","selectionMode","height","labelKey","loading","onValueChanged","onClear","onSelectAll","texts","store","title","value","valueKey","width","Object","refMain","useRef","useState","searchValue","setSearchValue","storeFilter","setStoreFilter","lastSelected","setLastSelected","useEffect","diference","v","ref","className","names","styles","createStyles","placeholder","onChange","e","filterContent","onClick","Set","y","key","Math","item","selectedValue","startPos","endPos","currentValue","start","range","ds","Array","index","current","handlerClick","event","search","clear","selectAll","deselectAll","items","selectedItems","noDataFound","PropTypes","string","App","lines","setLines","setStore","loadingStore","setLoadingStore","setTimeout","data","values","handleChange","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.362e595d.chunk.js","sourcesContent":["import React, { useEffect, useRef, useState } from 'react'\nimport PropTypes from 'prop-types'\nimport styles from './styles.module.css'\n\nexport const MultiSelect = ({\n  disabled,\n  disabledItems,\n  displayInfo,\n  elementAttr,\n  clearEnabled,\n  searchEnabled,\n  selectAllEnabled,\n  selectionMode,\n  height,\n  labelKey,\n  loading,\n  onValueChanged,\n  onClear,\n  onSelectAll,\n  texts,\n  store,\n  title,\n  value,\n  valueKey,\n  width\n}) => {\n  texts = Object.assign({}, MultiSelect.defaultProps.texts, texts)\n\n  //#region References\n\n  const refMain = useRef(null)\n\n  //#endregion\n\n  //#region States\n\n  const [searchValue, setSearchValue] = useState('')\n  const [storeFilter, setStoreFilter] = useState([])\n  const [lastSelected, setLastSelected] = useState(null)\n\n  //#endregion\n\n  //#region Hooks\n\n  useEffect(() => {\n    if (refMain) {\n      if (height) refMain.current.style.height = height\n      if (width) refMain.current.style.width = width\n    }\n  }, [])\n\n  //#endregion\n\n  //#region Funtions & Events\n\n  const createStyles = () => {\n    let names = [styles.multiselect]\n    if (disabled) names.push(styles.disabled)\n    return names.join(' ')\n  }\n\n  const handlerSearch = (e) => {\n    let filterContent = store.filter((v) => {\n      if (\n        v[labelKey].toUpperCase().indexOf(e.target.value.toUpperCase()) !== -1\n      )\n        return v\n      return null\n    })\n\n    setStoreFilter(filterContent)\n    setSearchValue(e.target.value)\n  }\n\n  const handleClear = () => {\n    if (onClear) onClear()\n    else onValueChanged([])\n  }\n\n  const handleSelectAll = () => {\n    if (onSelectAll) onSelectAll()\n    else {\n      if (!disabled) {\n        if (searchValue !== '') {\n          if (storeFilter.length > 0) {\n            if (value === null) {\n              onValueChanged([\n                ...storeFilter\n                  .map((v) => v[valueKey])\n                  .filter((j) => !disabledItems.includes(j))\n              ])\n            } else {\n              if (diference(storeFilter, value, valueKey, disabledItems)) {\n                //Select All (search)\n                onValueChanged([\n                  ...new Set([\n                    ...value,\n                    ...value\n                      .filter((x) =>\n                        storeFilter.map((y) => y[valueKey]).includes(x)\n                      )\n                      .concat(\n                        storeFilter\n                          .map((v) => v[valueKey])\n                          .filter((x) => !value.includes(x))\n                      )\n                      .filter((x) => !disabledItems.includes(x))\n                  ])\n                ])\n              } else {\n                //Deselect All (search)\n                onValueChanged([\n                  ...value\n                    .filter(\n                      (x) => !storeFilter.map((y) => y[valueKey]).includes(x)\n                    )\n                    .filter((x) => !disabledItems.includes(x))\n                ])\n              }\n            }\n          }\n        } else {\n          if (store.length > 0)\n            if (value === null) {\n              onValueChanged([\n                ...store\n                  .map((v) => v[valueKey])\n                  .filter((x) => !disabledItems.includes(x))\n              ])\n            } else {\n              if (diference(store, value, valueKey, disabledItems)) {\n                //Select All\n                onValueChanged([\n                  ...store\n                    .map((v) => v[valueKey])\n                    .filter((x) => !disabledItems.includes(x))\n                ])\n              } else {\n                //Deselect All\n                onValueChanged([])\n              }\n            }\n        }\n      }\n    }\n  }\n\n  const handlerClick = (e, selectedValue) => {\n    e.preventDefault()\n\n    setLastSelected(selectedValue)\n\n    if (e.shiftKey) {\n      if (selectionMode !== 'multiple') {\n        e.preventDefault()\n        return\n      }\n\n      let startPos = store.map((item) => item[valueKey]).indexOf(lastSelected)\n      let endPos = store.map((item) => item[valueKey]).indexOf(selectedValue)\n      let currentValue = value || []\n      let start = false\n      let range = []\n      let ds\n\n      if (searchValue !== '') ds = storeFilter\n      else ds = store\n\n      ds.forEach((v) => {\n        if (v[valueKey] === (startPos > endPos ? selectedValue : lastSelected))\n          start = true\n\n        if (start) {\n          range.push(v[valueKey])\n          if (\n            v[valueKey] === (startPos > endPos ? lastSelected : selectedValue)\n          )\n            start = false\n        }\n      })\n\n      onValueChanged(Array.from(new Set([...currentValue, ...range])))\n    } else {\n      let currentValue = value || []\n      if (onValueChanged) {\n        if (selectionMode !== 'multiple') {\n          const index = currentValue.findIndex((v) => v === selectedValue)\n          if (index === -1) onValueChanged([selectedValue])\n          else onValueChanged([])\n        } else {\n          const index = currentValue.findIndex((v) => v === selectedValue)\n          if (index < 0) onValueChanged([...currentValue, selectedValue])\n          else {\n            let current = currentValue.slice()\n            current.splice(index, 1)\n            onValueChanged(current)\n          }\n        }\n      }\n    }\n  }\n\n  const diference = (storeFilter, value, valueKey, disabledItems) =>\n    storeFilter.length !==\n    storeFilter.filter((v) => {\n      return value.indexOf(v[valueKey]) !== -1\n    }).length +\n      (disabledItems !== undefined\n        ? storeFilter.filter((v) => {\n            return disabledItems.indexOf(v[valueKey]) !== -1\n          }).length\n        : 0)\n\n  //#endregion\n\n  return (\n    <div ref={refMain} className={createStyles()} {...elementAttr}>\n      <div className={styles.header}>\n        <span>{title}</span>\n        {displayInfo &&\n          (value.length > 0 ? (\n            <span>\n              {value.length} of {store.length} {texts.selectedItems}\n            </span>\n          ) : searchValue !== '' ? (\n            <span>\n              {storeFilter.length} {texts.items}\n            </span>\n          ) : (\n            <span>\n              {store.length} {texts.items}\n            </span>\n          ))}\n      </div>\n      <div className={styles.actionContainer}>\n        {searchEnabled && (\n          <input\n            placeholder={texts.search}\n            onChange={handlerSearch}\n            value={searchValue}\n          />\n        )}\n        {clearEnabled && value.length > 0 && selectionMode === 'multiple' && (\n          <button className={styles.clearButton} onClick={handleClear}>\n            {texts.clear}\n          </button>\n        )}\n        {selectAllEnabled && selectionMode === 'multiple' && (\n          <button className={styles.selectAllButton} onClick={handleSelectAll}>\n            {searchValue !== ''\n              ? diference(storeFilter, value, valueKey, disabledItems, store) ||\n                storeFilter.length === 0\n                ? texts.selectAll\n                : texts.deselectAll\n              : diference(store, value, valueKey, disabledItems) ||\n                store.length === 0\n              ? texts.selectAll\n              : texts.deselectAll}\n          </button>\n        )}\n      </div>\n      <div className={styles.selectionContainer}>\n        {loading ? (\n          <div className={styles.loader} />\n        ) : searchValue !== '' && storeFilter.length === 0 ? (\n          <div>{texts.noDataFound}</div>\n        ) : (\n          <ul>\n            {(searchValue !== '' ? storeFilter : store).map((item) => (\n              <li\n                key={Math.random().toString(36).slice(2).substring(0, 8)}\n                className={\n                  disabledItems.includes(item[valueKey])\n                    ? styles.disabled\n                    : value.includes(item[valueKey])\n                    ? styles.selected\n                    : ''\n                }\n                onClick={(event) =>\n                  disabledItems.includes(item[valueKey])\n                    ? undefined\n                    : handlerClick(event, item[valueKey])\n                }\n              >\n                {item[labelKey]}\n              </li>\n            ))}\n          </ul>\n        )}\n      </div>\n    </div>\n  )\n}\n\n//#region Properties\n\nMultiSelect.defaultProps = {\n  clearEnabled: true,\n  disabled: false,\n  disabledItems: [],\n  displayInfo: true,\n  elementAttr: {},\n  height: '',\n  labelKey: '',\n  loading: false,\n  onValueChanged: undefined,\n  onClear: undefined,\n  onSelectAll: undefined,\n  searchEnabled: true,\n  selectAllEnabled: true,\n  selectionMode: 'multiple',\n  store: [],\n  texts: {\n    search: 'Search...',\n    clear: 'Clear',\n    selectAll: 'Select All',\n    deselectAll: 'Deselect All',\n    items: 'Item(s)',\n    selectedItems: 'Item(s) selected',\n    noDataFound: 'No data to display'\n  },\n  title: '',\n  value: [],\n  valueKey: '',\n  width: ''\n}\n\nMultiSelect.propTypes = {\n  clearEnabled: PropTypes.bool,\n  disabled: PropTypes.bool,\n  disabledItems: PropTypes.array,\n  displayInfo: PropTypes.bool,\n  elementAttr: PropTypes.object,\n  height: PropTypes.string,\n  labelKey: PropTypes.string,\n  loading: PropTypes.bool,\n  onValueChanged: PropTypes.func,\n  onClear: PropTypes.func,\n  onSelectAll: PropTypes.func,\n  searchEnabled: PropTypes.bool,\n  selectAllEnabled: PropTypes.bool,\n  selectionMode: PropTypes.oneOf(['single', 'multiple']),\n  store: PropTypes.array,\n  texts: PropTypes.object,\n  title: PropTypes.string,\n  value: PropTypes.array,\n  valueKey: PropTypes.string,\n  width: PropTypes.string\n}\n\n//#endregion\n","import React, { useEffect, useState } from 'react'\n\nimport { MultiSelect } from '@liccampanavd/vd-multiselect'\nimport '@liccampanavd/vd-multiselect/dist/index.css'\n\nimport data from './data.json'\n\nconst App = () => {\n  const [lines, setLines] = useState([])\n  const [store, setStore] = useState([])\n  const [loadingStore, setLoadingStore] = useState(true)\n\n  useEffect(() => {\n    setTimeout(() => {\n      setStore(data)\n      setLoadingStore(false)\n    }, 4000)\n  }, [])\n\n  const handleChange = (values) => {\n    setLines(values)\n  }\n\n  return (\n    <MultiSelect\n      title='Favourite Programming Languages'\n      height='250px'\n      selectionMode='multiple'\n      store={store}\n      labelKey='lineDesc'\n      valueKey='lineId'\n      value={lines}\n      loading={loadingStore}\n      onValueChanged={(values) => handleChange(values)}\n    />\n  )\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}